{"changed":true,"filter":false,"title":"app.py","tooltip":"/clo835_fall2022_assignment1/app.py","value":"from flask import Flask, render_template, request\nfrom pymysql import connections\nimport os\nimport random\nimport argparse\n\n\napp = Flask(__name__)\n\nDBHOST = os.environ.get(\"DBHOST\") or \"localhost\"\nDBUSER = os.environ.get(\"DBUSER\") or \"root\"\nDBPWD = os.environ.get(\"DBPWD\") or \"passwors\"\nDATABASE = os.environ.get(\"DATABASE\") or \"employees\"\nCOLOR_FROM_ENV = os.environ.get('APP_COLOR') or \"lime\"\nDBPORT = int(os.environ.get(\"DBPORT\"))\n\n# Create a connection to the MySQL database\ndb_conn = connections.Connection(\n    host= DBHOST,\n    port=DBPORT,\n    user= DBUSER,\n    password= DBPWD, \n    db= DATABASE\n    \n)\noutput = {}\ntable = 'employee';\n\n# Define the supported color codes\ncolor_codes = {\n    \"red\": \"#e74c3c\",\n    \"green\": \"#16a085\",\n    \"blue\": \"#89CFF0\",\n    \"blue2\": \"#30336b\",\n    \"pink\": \"#f4c2c2\",\n    \"darkblue\": \"#130f40\",\n    \"lime\": \"#C1FF9C\",\n}\n\n\n# Create a string of supported colors\nSUPPORTED_COLORS = \",\".join(color_codes.keys())\n\n# Generate a random color\nCOLOR = random.choice([\"red\", \"green\", \"blue\", \"blue2\", \"darkblue\", \"pink\", \"lime\"])\n\n\n@app.route(\"/\", methods=['GET', 'POST'])\ndef home():\n    return render_template('addemp.html', color=color_codes[COLOR])\n\n@app.route(\"/about\", methods=['GET','POST'])\ndef about():\n    return render_template('about.html', color=color_codes[COLOR])\n    \n@app.route(\"/addemp\", methods=['POST'])\ndef AddEmp():\n    emp_id = request.form['emp_id']\n    first_name = request.form['first_name']\n    last_name = request.form['last_name']\n    primary_skill = request.form['primary_skill']\n    location = request.form['location']\n\n  \n    insert_sql = \"INSERT INTO employee VALUES (%s, %s, %s, %s, %s)\"\n    cursor = db_conn.cursor()\n\n    try:\n        \n        cursor.execute(insert_sql,(emp_id, first_name, last_name, primary_skill, location))\n        db_conn.commit()\n        emp_name = \"\" + first_name + \" \" + last_name\n\n    finally:\n        cursor.close()\n\n    print(\"all modification done...\")\n    return render_template('addempoutput.html', name=emp_name, color=color_codes[COLOR])\n\n@app.route(\"/getemp\", methods=['GET', 'POST'])\ndef GetEmp():\n    return render_template(\"getemp.html\", color=color_codes[COLOR])\n\n\n@app.route(\"/fetchdata\", methods=['GET','POST'])\ndef FetchData():\n    emp_id = request.form['emp_id']\n\n    output = {}\n    select_sql = \"SELECT emp_id, first_name, last_name, primary_skill, location from employee where emp_id=%s\"\n    cursor = db_conn.cursor()\n\n    try:\n        cursor.execute(select_sql,(emp_id))\n        result = cursor.fetchone()\n        \n        # Add No Employee found form\n        output[\"emp_id\"] = result[0]\n        output[\"first_name\"] = result[1]\n        output[\"last_name\"] = result[2]\n        output[\"primary_skills\"] = result[3]\n        output[\"location\"] = result[4]\n        \n    except Exception as e:\n        print(e)\n\n    finally:\n        cursor.close()\n\n    return render_template(\"getempoutput.html\", id=output[\"emp_id\"], fname=output[\"first_name\"],\n                           lname=output[\"last_name\"], interest=output[\"primary_skills\"], location=output[\"location\"], color=color_codes[COLOR])\n\nif __name__ == '__main__':\n    \n    # Check for Command Line Parameters for color\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--color', required=False)\n    args = parser.parse_args()\n\n    if args.color:\n        print(\"Color from command line argument =\" + args.color)\n        COLOR = args.color\n        if COLOR_FROM_ENV:\n            print(\"A color was set through environment variable -\" + COLOR_FROM_ENV + \". However, color from command line argument takes precendence.\")\n    elif COLOR_FROM_ENV:\n        print(\"No Command line argument. Color from environment variable =\" + COLOR_FROM_ENV)\n        COLOR = COLOR_FROM_ENV\n    else:\n        print(\"No command line argument or environment variable. Picking a Random Color =\" + COLOR)\n\n    # Check if input color is a supported one\n    if COLOR not in color_codes:\n        print(\"Color not supported. Received '\" + COLOR + \"' expected one of \" + SUPPORTED_COLORS)\n        exit(1)\n\n    app.run(host='0.0.0.0',port=8080,debug=True)\n","undoManager":{"mark":-2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["d"],"id":5}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["="],"id":6}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["="],"id":7},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["d"]}]]},"ace":{"folds":[],"scrolltop":108,"scrollleft":0,"selection":{"start":{"row":13,"column":0},"end":{"row":13,"column":14},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":24,"state":"start","mode":"ace/mode/python"}},"timestamp":1664334912695}